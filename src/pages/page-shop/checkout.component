<can-component tag="page-checkout">
  <view>
    <can-import from="~/attrs/modal-scrollstop.attr" />

    <div class="modal fade" id="checkout-details" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" modal-scrollstop>
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h3 class="modal-title" id="myModalLabel">Checkout</h3>
          </div>
          <div class="modal-body">

            <div class="table-responsive">
              <table class="table table-striped">
                <thead>
                <tr>
                  <th class="text-nowrap h4">Product Category / Name</th>
                  <th class="text-nowrap h4 text-center">Unit Price</th>
                  <th class="text-nowrap h4 text-center">Quantity</th>
                  <th class="text-nowrap h4 text-center">Edit</th>
                  <th class="text-nowrap h4 text-right">Total</th>
                </tr>
                </thead>
                <tbody>
                {{#each (userCart.items)}}
                  <tr>
                    <td>{{#if category}}{{category}} / {{/if}} {{product}}</td>
                    <td class="text-center">{{numberFormat price}}</td>
                    <td class="text-center">{{quantity}}</td>
                    <td class="text-center text-nowrap">
                      <div class="btn-group" role="group" style="min-width: 66px;">
                        <button class="btn btn-xs btn-default" type="button" on:click="scope.root.quantityUp(this)">
                          <i class="fa fa-plus" aria-hidden="true"></i>
                        </button>
                        <button class="btn btn-xs btn-default" type="button" on:click="scope.root.quantityDown(this)">
                          <i class="fa fa-minus" aria-hidden="true"></i>
                        </button>
                        <button class="btn btn-xs btn-danger" type="button" on:click="scope.root.quantityRemove(this)">
                          <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                      </div>
                    </td>
                    <td class="text-right">{{numberFormat total}}</td>
                  </tr>
                {{/each}}
                <tr>
                  <td colspan="4" class="h4">&nbsp;</td>
                  <td class="text-nowrap h4 text-right">{{numberFormat userCart.cartTotal}}</td>
                </tr>
                </tbody>
              </table>
            </div>

          </div>
          <div class="modal-footer">
            <div id="paypal-button"></div>
          </div>
        </div>
      </div>
    </div>

  </view>
  <script type="view-model">
    import $ from 'jquery'
    import DefineMap from 'can-define/map/map'
    import loader from '@loader'

    export default DefineMap.extend({
      userCart: {
        type: 'any'
      },
      disableForm: {
        default: false
      },
      processing: {
        default: false
      },
      checkout () {

      },
      quantityUp (item) {
        if (typeof item === 'undefined') item = this.viewShopItem
        item.quantity += 1
        this.updateCartAPI()
      },
      quantityDown (item) {
        if (typeof item === 'undefined') item = this.viewShopItem
        if (item.quantity > 0) {
          item.quantity -= 1
        }

        if (item.quantity === 0) {
          this.quantityRemove(item)
        }
        this.updateCartAPI()
      },
      quantityRemove (item) {
        if (typeof item === 'undefined') item = this.viewShopItem
        this.userCart.items.forEach((currentVal, index) => {
          if (currentVal === item) {
            this.userCart.items.splice(index, 1)
          }
        })
        item.addedToCart = false
        item.quantity = 1

        if (this.userCart.items.length === 0) {
          $('#checkout-details').modal('hide')
        }

        this.updateCartAPI()
      },
      updateCartAPI () {
        this.userCart.save()
      },
      connectedCallback (el) {

        if (loader.payments.paypal) {
          // start paypal
          $.getScript('//www.paypalobjects.com/api/checkout.js', () => {
            paypal.Button.render({
              env: 'sandbox', // Or 'production',
              commit: true,
              style: {
                color: 'blue',
                size: 'medium',
                shape: 'rect',
                tagline: false
              },
              payment: function() {
                this.userCart.initiatedPayment = true
                this.userCart.paymentType = 'paypal'

                return this.userCart
                  .save()
                  .then(data => {
                    return data.paypal.paymentID
                  })
              },
              onAuthorize: function(data, actions) {
                var data = {
                  paymentID: data.paymentID,
                  payerID: data.payerID
                }
              },
              onCancel: function(data, actions) {
                this.userCart.initiatedPayment = false
                return this.userCart.save()
              },
              onError: function(err) {
                this.userCart.initiatedPayment = false
                return this.userCart.save()
              }
            }, '#paypal-button')
          })
          // end paypal
        }

        if (loader.payments.stripe) {
          // start stripe

          // end stripe
        }

        return () => {}
      }
    })
  </script>
</can-component>
